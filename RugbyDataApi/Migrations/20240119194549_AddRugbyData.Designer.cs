// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RugbyDataApi.Data;

#nullable disable

namespace RugbyDataApi.Migrations
{
    [DbContext(typeof(RugbyDataDbContext))]
    [Migration("20240119194549_AddRugbyData")]
    partial class AddRugbyData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("RugbyDataApi.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Club_Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FixtureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SportRadar_Competitor_Id")
                        .HasColumnType("TEXT");

                    b.HasKey("ClubId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("FixtureId");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Competition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Competition_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("End_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportRadar_Competition_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Start_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("CompetitionId");

                    b.ToTable("Competition");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Fixture", b =>
                {
                    b.Property<int>("FixtureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Away_Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Away_Team")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fixture_Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Home_Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Home_Team")
                        .HasColumnType("TEXT");

                    b.Property<int>("Round_Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Start_Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("FixtureId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Fixture");
                });

            modelBuilder.Entity("RugbyDataApi.Models.FixtureStatistics", b =>
                {
                    b.Property<int>("FixtureStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Ball_Possessition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Carries")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Clean_Breaks")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Conversions")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Drop_Goals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FixtureId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Lineouts_Lost")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Lineouts_Won")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Meters_Run")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Offloads")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Passes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Penalties_Conceded")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Penalty_Goals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Red_Cards")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Scrums_Lost")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Scrums_Won")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Tackles")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Tackles_Missed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Total_Scrums")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Tries")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Try_Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Turnovers_Won")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Yellow_Cards")
                        .HasColumnType("INTEGER");

                    b.HasKey("FixtureStatisticsId");

                    b.HasIndex("FixtureId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FixtureStatistics");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Age")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("First_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Jersey_Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Last_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId");

                    b.HasIndex("ClubId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Club", b =>
                {
                    b.HasOne("RugbyDataApi.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RugbyDataApi.Models.Fixture", null)
                        .WithMany("Clubs")
                        .HasForeignKey("FixtureId");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Fixture", b =>
                {
                    b.HasOne("RugbyDataApi.Models.Competition", "Competition")
                        .WithMany("Fixtures")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("RugbyDataApi.Models.FixtureStatistics", b =>
                {
                    b.HasOne("RugbyDataApi.Models.Fixture", "Fixture")
                        .WithMany("FixtureStatistics")
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RugbyDataApi.Models.Player", "Player")
                        .WithMany("FixtureStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixture");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Player", b =>
                {
                    b.HasOne("RugbyDataApi.Models.Club", "Club")
                        .WithMany("Players")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Club", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Competition", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Fixture", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("FixtureStatistics");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Player", b =>
                {
                    b.Navigation("FixtureStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
