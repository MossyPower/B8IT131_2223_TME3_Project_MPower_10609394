// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RugbyDataApi.Data;

#nullable disable

namespace RugbyDataApi.Migrations
{
    [DbContext(typeof(RugbyDataDbContext))]
    [Migration("20240114113812_AddRugbyData")]
    partial class AddRugbyData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("RugbyDataApi.Models.Club", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Club_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Competition_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchDayTeamId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchDayTeamId");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Competition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClubsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Competition_Name")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("End_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("SeasonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClubsId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("RugbyDataApi.Models.CompetitionGame", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Away_Score")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompetitionRoundId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Home_Score")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Venue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CompetitionRoundId");

                    b.ToTable("CompetitionGames");
                });

            modelBuilder.Entity("RugbyDataApi.Models.CompetitionRound", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompetitionId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("End_Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Round_Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Start_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("CompetitionRounds");
                });

            modelBuilder.Entity("RugbyDataApi.Models.MatchDayTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompetitionGameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionGameId");

                    b.ToTable("MatchDayTeams");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClubId")
                        .HasColumnType("TEXT");

                    b.Property<string>("First_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Jersey_Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Last_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchDayTeamId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("MatchDayTeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RugbyDataApi.Models.PlayerMatchStatistics", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Ball_Possessition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Carries")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Clean_Breaks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompetitionGameId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Conversions")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Drop_Goals")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Lineouts_Lost")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Lineouts_Won")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Meters_Run")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Offloads")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Passes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Penalties_Conceded")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Penalty_Goals")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Red_Cards")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Scrums_Lost")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Scrums_Won")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Tackles")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Tackles_Missed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Total_Scrums")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tries")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Try_Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Turnovers_Won")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Yellow_Cards")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionGameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayersMatchStatistics");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Season", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Competition_Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("SportRadar_Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Club", b =>
                {
                    b.HasOne("RugbyDataApi.Models.MatchDayTeam", null)
                        .WithMany("Clubs")
                        .HasForeignKey("MatchDayTeamId");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Competition", b =>
                {
                    b.HasOne("RugbyDataApi.Models.Club", "Clubs")
                        .WithMany()
                        .HasForeignKey("ClubsId");

                    b.HasOne("RugbyDataApi.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.Navigation("Clubs");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("RugbyDataApi.Models.CompetitionGame", b =>
                {
                    b.HasOne("RugbyDataApi.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId");

                    b.HasOne("RugbyDataApi.Models.CompetitionRound", "CompetitionRound")
                        .WithMany("CompetitionGame")
                        .HasForeignKey("CompetitionRoundId");

                    b.Navigation("Competition");

                    b.Navigation("CompetitionRound");
                });

            modelBuilder.Entity("RugbyDataApi.Models.CompetitionRound", b =>
                {
                    b.HasOne("RugbyDataApi.Models.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("RugbyDataApi.Models.MatchDayTeam", b =>
                {
                    b.HasOne("RugbyDataApi.Models.CompetitionGame", "CompetitionGame")
                        .WithMany()
                        .HasForeignKey("CompetitionGameId");

                    b.Navigation("CompetitionGame");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Player", b =>
                {
                    b.HasOne("RugbyDataApi.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("RugbyDataApi.Models.MatchDayTeam", null)
                        .WithMany("Players")
                        .HasForeignKey("MatchDayTeamId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("RugbyDataApi.Models.PlayerMatchStatistics", b =>
                {
                    b.HasOne("RugbyDataApi.Models.CompetitionGame", "CompetitionGame")
                        .WithMany()
                        .HasForeignKey("CompetitionGameId");

                    b.HasOne("RugbyDataApi.Models.Player", "Player")
                        .WithMany("Statistics")
                        .HasForeignKey("PlayerId");

                    b.Navigation("CompetitionGame");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RugbyDataApi.Models.CompetitionRound", b =>
                {
                    b.Navigation("CompetitionGame");
                });

            modelBuilder.Entity("RugbyDataApi.Models.MatchDayTeam", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("RugbyDataApi.Models.Player", b =>
                {
                    b.Navigation("Statistics");
                });
#pragma warning restore 612, 618
        }
    }
}
